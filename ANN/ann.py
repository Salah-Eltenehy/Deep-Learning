# -*- coding: utf-8 -*-
"""ANN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OGOsuC1A3Lm_VC_-mAYNGKvTt8VbtqBN

Import libraries
"""

import pandas as pd
import numpy as np
import tensorflow as tf

"""Current version of tensorflow"""

tf.__version__

"""Read Data
Initialize Independent & dependent variables

"""

dataSet = pd.read_csv("Churn_Modelling.csv")
X = dataSet.iloc[:, 3:-1].values
y = dataSet.iloc[:, -1].values

print(X[:10, :])

"""Encode the data
First we use label-encoder for gender
Second we use one-hot-encoder for country
"""

from sklearn.preprocessing import LabelEncoder
labelEncoder = LabelEncoder()
X[:, 2] = labelEncoder.fit_transform(X[:, 2])
print(pd.DataFrame(X[:10, :]))

from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder
ct = ColumnTransformer(transformers= [('encoder', OneHotEncoder(), [1])], remainder='passthrough')
X = np.array(ct.fit_transform(X))
print(pd.DataFrame(X[:10, :]))

"""Scaling data to become easier when neural-network work with it"""

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X = sc.fit_transform(X)

"""Split the data to training & test sets"""

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state= 0)

print(pd.DataFrame(X_train).head())

"""Create our ANN
1.   create an empty ANN
2.   Initialize the input & first hidden layers
3.   Initialize second hidden layer
4.   Initialize output layer
5.   Train the ANN on the training-set
6.   predict

1)
"""

#create an empty ann "variable"
ann = tf.keras.models.Sequential()

"""2)"""

#Add fully connected layer to ann
ann.add(tf.keras.layers.Dense(units= 6, activation= 'relu'))

"""3)"""

ann.add(tf.keras.layers.Dense(units= 6, activation= 'relu'))

"""4)"""

ann.add(tf.keras.layers.Dense(units= 1, activation= 'sigmoid'))

"""# 5)"""

#For non-binary classification choose categorical_crossentropy for loss function
ann.compile(optimizer= 'adam', loss= 'binary_crossentropy', metrics= ['accuracy'])

ann.fit(X_train, y_train, batch_size= 32, epochs= 100)

"""6)"""

y_pred = ann.predict(X_test)
y_pred = y_pred>=0.5

y_pred_train = ann.predict(X_train)
y_pred_train = y_pred_train>=0.5

from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred)
print(cm)

cm = confusion_matrix(y_train, y_pred_train)
print(cm)