# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pvnR6vSqrFVwzhOETg5lFhRDBjFEAHLA
"""

import tensorflow as tf
from keras.preprocessing.image import ImageDataGenerator

training_data_generator = ImageDataGenerator(rescale= 1.0/255,
                                            shear_range= 0.2,
                                            zoom_range= 0.2,
                                            horizontal_flip= True
                                            )

test_data_generator = ImageDataGenerator(rescale= 1.0/255)

training_set = training_data_generator.flow_from_directory("training",
                                                           target_size= (64, 64),
                                                           batch_size=32,
                                                           class_mode= "binary")

test_set = test_data_generator.flow_from_directory("test",
                                                   target_size= (64, 64),
                                                    batch_size=32,
                                                    class_mode= "binary")

cnn = tf.keras.models.Sequential()

cnn.add(tf.keras.layers.Conv2D(filters= 32, kernel_size=3, activation="relu", input_shape= [64, 64, 3]))

cnn.add(tf.keras.layers.MaxPool2D(pool_size= 2, strides=2))

cnn.add(tf.keras.layers.Conv2D(filters= 32, kernel_size=2, activation= 'relu'))
cnn.add(tf.keras.layers.MaxPool2D(pool_size= 2, strides= 2))

cnn.add(tf.keras.layers.Flatten())

cnn.add(tf.keras.layers.Dense(units= 128, activation= 'relu'))

cnn.add(tf.keras.layers.Dense(units= 1, activation= 'sigmoid'))

cnn.compile(optimizer= 'adam', metrics=['accuracy'], loss= 'binary_crossentropy')

cnn.fit(x= training_set, validation_data= test_set, epochs= 50)

import numpy as np
from keras.preprocessing import image
test_image = image.load_img('training/dogs/0.jpg', target_size= (64, 64))
test_image = image.img_to_array(test_image)
test_image = np.expand_dims(test_image, axis= 0)
result = cnn.predict(test_image/255.0)
print(training_set.class_indices)
cnn.summary()